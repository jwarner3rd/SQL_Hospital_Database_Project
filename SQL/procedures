

-- -----------------------------------------------------
-- procedure TestCheckIn
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`TestCheckIn`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `TestCheckIn`(
    IN patient_id INT,
    IN room_no VARCHAR(10),
    IN join_date DATETIME
)
BEGIN
    DECLARE new_stay_id INT;
    DECLARE room_status TINYINT(1) DEFAULT 0;

    -- Check room availability
    SELECT Room_availibility INTO room_status
    FROM Room
    WHERE LOWER(Room_no) = LOWER(room_no)
    LIMIT 1;

    IF room_status = 1 THEN
        -- Find the highest Stay_ID and increment by 1
        SELECT IFNULL(MAX(Stay_ID), 0) + 1 INTO new_stay_id FROM Check_IN_OUT;

        -- Insert the new stay record
        INSERT INTO Check_IN_OUT (Stay_ID, Patient_ID, Room_no, Join_date, Leave_date, Discharge_status)
        VALUES (new_stay_id, patient_id, room_no, join_date, NULL, 'NULL');

        -- Mark the room as unavailable
        UPDATE Room
        SET Room_availibility = 0
        WHERE LOWER(Room_no) = LOWER(room_no);

        SELECT new_stay_id AS New_Stay_ID;
    ELSE
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Room is not available';
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure dispense_medicine
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`dispense_medicine`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `dispense_medicine`(
    IN p_Prescription_ID INT,
    IN p_Vitals_rounds_ID INT
)
BEGIN
    DECLARE v_Medicine_ID INT;
    DECLARE v_Med_Quantity INT;
    DECLARE v_Dosage INT;
    DECLARE v_Prescribed_Dosage INT;
    DECLARE v_Total_Dosage INT;
    DECLARE v_Dispense_Date DATE;

    -- Get the Medicine_ID and Dosage from the Prescription table
    SELECT Medicine_ID, Dosage INTO v_Medicine_ID, v_Prescribed_Dosage
    FROM Prescription
    WHERE Prescription_ID = p_Prescription_ID;

    -- Get the current quantity of the medication
    SELECT Med_Quantity INTO v_Med_Quantity
    FROM Medicine
    WHERE Medicine_ID = v_Medicine_ID;

    -- Get the dispense date from the Vitals_rounds table
    SELECT DATE INTO v_Dispense_Date
    FROM Vitals_rounds
    WHERE Vitals_rounds_ID = p_Vitals_rounds_ID;

    -- Calculate the total dosage dispensed for the specific prescription on the given date
    SELECT IFNULL(SUM(p.Dosage), 0) INTO v_Total_Dosage
    FROM Med_dispense md
    JOIN Prescription p ON md.Prescription_ID = p.Prescription_ID
    JOIN Vitals_rounds vr ON md.Vitals_rounds_ID = vr.Vitals_rounds_ID
    WHERE md.Prescription_ID = p_Prescription_ID
      AND DATE(vr.Date) = v_Dispense_Date;

    -- Check if the medication quantity is greater than 0
    IF v_Med_Quantity > 0 THEN
        -- Check if the total dosage for the date does not exceed the prescribed dosage
        IF v_Total_Dosage + v_Prescribed_Dosage <= v_Prescribed_Dosage THEN
            -- Insert into Med_dispense table
            INSERT INTO Med_dispense (Prescription_ID, Vitals_rounds_ID)
            VALUES (p_Prescription_ID, p_Vitals_rounds_ID);
            
            -- Update the Med_Quantity in the Medicine table
            UPDATE Medicine
            SET Med_Quantity = Med_Quantity - 1
            WHERE Medicine_ID = v_Medicine_ID;
        ELSE
            -- Raise an error if the total dosage for the date exceeds the prescribed dosage
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Daily dosage limit exceeded';
        END IF;
    ELSE
        -- Raise an error if the medication quantity is 0
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Insufficient medication quantity';
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure new_procedure
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`new_procedure`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `new_procedure`()
BEGIN

SELECT 
    Check_IN_OUT.Room_no, 
    Check_IN_OUT.Join_date, 
    CONCAT(Patient.Patient_LName, ', ', Patient.Patient_FName) AS full_name, 
    CURDATE(),
    DATEDIFF(CURDATE(), Check_IN_OUT.Join_date)
FROM 
    Check_IN_OUT
LEFT JOIN 
    Patient 
ON 
    Check_IN_OUT.Patient_ID = Patient.Patient_ID;
    
WITH ComputedValues AS (
    SELECT 
        Check_IN_OUT.Room_no, 
        Check_IN_OUT.Join_date,
        CURDATE() AS Today,
        DATEDIFF(CURDATE(), Check_IN_OUT.Join_date) AS DaysCheckedIn,
        CONCAT(Patient.Patient_LName, ', ', Patient.Patient_FName) AS FullName,
        Patient.Patient_ID,  
        CONCAT(Doctor.Doctor_FName, ' ', Doctor.Doctor_LName) AS PCPName  
    FROM 
        Check_IN_OUT
    LEFT JOIN 
        Patient ON Check_IN_OUT.Patient_ID = Patient.Patient_ID
	LEFT JOIN 
        Doctor ON Patient.PCP = Doctor.Doctor_ID
    WHERE
        Check_IN_OUT.Leave_date IS NULL
),
Medications AS (
    SELECT 
        Prescription.Patient_ID,
        GROUP_CONCAT(Medicine.Med_Name SEPARATOR ', ') AS Medications
    FROM 
        Prescription
    JOIN 
        Medicine ON Prescription.Medicine_ID = Medicine.Medicine_ID
    GROUP BY 
        Prescription.Patient_ID
),
Last_Round AS (
    SELECT 
        Vitals_rounds.Patient_ID,
        MAX(Vitals_rounds.Date) AS LastRoundDate
    FROM
        Vitals_rounds
    GROUP BY 
        Vitals_rounds.Patient_ID
),
Last_Round_nurse AS (
    SELECT 
        lr.Patient_ID,
        lr.LastRoundDate,
        CONCAT(Nurse.Nurse_FName, ', ', Nurse.Nurse_LName) AS NurseName,
        CONCAT(vr.BP_Systolic, '/', vr.BP_Diastolic) AS LastBloodPressure,
        vr.O2_saturation AS LastO2Saturation,
        vr.Temp AS LastTemp
    FROM (
        SELECT 
            Patient_ID,
            MAX(Date) AS LastRoundDate
        FROM 
            Vitals_rounds
        GROUP BY 
            Patient_ID
    ) lr
    JOIN 
        Vitals_rounds vr ON lr.Patient_ID = vr.Patient_ID AND lr.LastRoundDate = vr.Date
    JOIN 
        Nurse ON vr.Nurse_ID = Nurse.Nurse_ID
)SELECT 
    cv.Room_no,
    cv.Join_date,
    cv.FullName,
    cv.DaysCheckedIn,
    cv.PCPName,
    COALESCE(m.Medications, 'None') AS Medications,
    lr.LastRoundDate,
    lrn.NurseName,
    lrn.LastBloodPressure,
    lrn.LastO2Saturation,
    lrn.LastTemp
FROM 
    ComputedValues cv
LEFT JOIN 
    Medications m ON cv.Patient_ID = m.Patient_ID
LEFT JOIN 
    Last_Round lr ON cv.Patient_ID = lr.Patient_ID
LEFT JOIN 
    Last_Round_nurse lrn ON cv.Patient_ID = lrn.Patient_ID AND lr.LastRoundDate = lrn.LastRoundDate;


END$$

DELIMITER ;
USE `HospitalDB`;

DELIMITER $$

USE `HospitalDB`$$
DROP TRIGGER IF EXISTS `HospitalDB`.`NewStayTrigger` $$
USE `HospitalDB`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `HospitalDB`.`NewStayTrigger`
AFTER INSERT ON `HospitalDB`.`Check_IN_OUT`
FOR EACH ROW
BEGIN
    IF NEW.Leave_date IS NULL THEN
        UPDATE Room
        SET Room_availibility = 0
        WHERE Room_no = NEW.Room_no;
    END IF;
END$$


USE `HospitalDB`$$
DROP TRIGGER IF EXISTS `HospitalDB`.`UpdateLeaveDateTrigger` $$
USE `HospitalDB`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `HospitalDB`.`UpdateLeaveDateTrigger`
BEFORE UPDATE ON `HospitalDB`.`Check_IN_OUT`
FOR EACH ROW
BEGIN
    IF OLD.Leave_date IS NULL AND NEW.Leave_date IS NOT NULL THEN
        UPDATE Room
        SET Room_availibility = 1
        WHERE Room_no = OLD.Room_no;
    END IF;
END$$


USE `HospitalDB`$$
DROP TRIGGER IF EXISTS `HospitalDB`.`before_insert_check_in_out` $$
USE `HospitalDB`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `HospitalDB`.`before_insert_check_in_out`
BEFORE INSERT ON `HospitalDB`.`Check_IN_OUT`
FOR EACH ROW
BEGIN
    IF NOT IsRoomAvailable(NEW.Room_no) THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Room is not available for check-in.';
    END IF;
END$$


USE `HospitalDB`$$
DROP TRIGGER IF EXISTS `HospitalDB`.`after_insert_med_dispense` $$
USE `HospitalDB`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `HospitalDB`.`after_insert_med_dispense`
AFTER INSERT ON `HospitalDB`.`Med_dispense`
FOR EACH ROW
BEGIN
    DECLARE v_Medicine_ID INT;
    
    -- Get the Medicine_ID from the Prescription table
    SELECT Medicine_ID INTO v_Medicine_ID
    FROM Prescription
    WHERE Prescription_ID = NEW.Prescription_ID;

    -- Update the Med_Quantity in the Medicine table
    UPDATE Medicine
    SET Med_Quantity = Med_Quantity - 1
    WHERE Medicine_ID = v_Medicine_ID;
END$$


USE `HospitalDB`$$
DROP TRIGGER IF EXISTS `HospitalDB`.`before_insert_med_dispense` $$
USE `HospitalDB`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `HospitalDB`.`before_insert_med_dispense`
BEFORE INSERT ON `HospitalDB`.`Med_dispense`
FOR EACH ROW
BEGIN
    DECLARE v_Medicine_ID INT;
    DECLARE v_Prescribed_Dosage INT;
    DECLARE v_Total_Dosage INT;
    DECLARE v_Dispense_Date DATE;
    DECLARE v_Current_Day_Dosage INT;

    -- Get the Prescription details
    SELECT Medicine_ID, Dosage INTO v_Medicine_ID, v_Prescribed_Dosage
    FROM Prescription
    WHERE Prescription_ID = NEW.Prescription_ID;

    -- Get the dispense date from the Vitals_rounds table
    SELECT `Date` INTO v_Dispense_Date
    FROM Vitals_rounds
    WHERE Vitals_rounds_ID = NEW.Vitals_rounds_ID;

    -- Calculate the total dosage dispensed for the specific prescription on the given date
    SELECT IFNULL(COUNT(*), 0) INTO v_Total_Dosage
    FROM Med_dispense md
    JOIN Vitals_rounds vr ON md.Vitals_rounds_ID = vr.Vitals_rounds_ID
    WHERE md.Prescription_ID = NEW.Prescription_ID
      AND DATE(vr.Date) = DATE(v_Dispense_Date);

    -- Determine the current dosage count for the day including the new entry
    SET v_Current_Day_Dosage = v_Total_Dosage + 1;

    -- Check if the total dosage for the date does not exceed the prescribed dosage
    IF v_Current_Day_Dosage > v_Prescribed_Dosage THEN
        -- Raise an error if the total dosage for the date exceeds the prescribed dosage
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Daily dosage limit exceeded';
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
