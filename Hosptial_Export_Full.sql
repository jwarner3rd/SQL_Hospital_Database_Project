-- MySQL Script generated by MySQL Workbench
-- Sun Jan 19 23:24:46 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema HospitalDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema HospitalDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `HospitalDB` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `HospitalDB` ;

-- -----------------------------------------------------
-- Table `HospitalDB`.`Doctor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HospitalDB`.`Doctor` ;

CREATE TABLE IF NOT EXISTS `HospitalDB`.`Doctor` (
  `Doctor_ID` INT NOT NULL,
  `Doctor_FName` VARCHAR(100) NULL DEFAULT NULL,
  `Doctor_LName` VARCHAR(100) NULL DEFAULT NULL,
  `Doctor_dob` DATE NULL DEFAULT NULL,
  `Doctor_Gender` VARCHAR(100) NULL DEFAULT NULL,
  `Doctor_Address` VARCHAR(100) NULL DEFAULT NULL,
  `Doctor_Email` VARCHAR(100) NULL DEFAULT NULL,
  `Doctor_phone` VARCHAR(15) NULL DEFAULT NULL,
  PRIMARY KEY (`Doctor_ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `HospitalDB`.`Patient`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HospitalDB`.`Patient` ;

CREATE TABLE IF NOT EXISTS `HospitalDB`.`Patient` (
  `Patient_ID` INT NOT NULL,
  `Patient_FName` VARCHAR(100) NOT NULL,
  `Patient_LName` VARCHAR(100) NOT NULL,
  `dob` DATE NULL DEFAULT NULL,
  `Patient_race` VARCHAR(100) NULL DEFAULT NULL,
  `Blood_type` VARCHAR(5) NULL DEFAULT NULL,
  `Patient_Address` VARCHAR(100) NULL DEFAULT NULL,
  `Patient_Email` VARCHAR(100) NULL DEFAULT NULL,
  `Patient_phone` VARCHAR(15) NULL DEFAULT NULL,
  `Patient_Gender` VARCHAR(100) NULL DEFAULT NULL,
  `Patient_Emergency_Contact` INT NULL DEFAULT NULL,
  `PCP` INT NULL DEFAULT NULL,
  PRIMARY KEY (`Patient_ID`),
  CONSTRAINT `Patient_Doc_FK`
    FOREIGN KEY (`PCP`)
    REFERENCES `HospitalDB`.`Doctor` (`Doctor_ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `Patient_Doc_FK` ON `HospitalDB`.`Patient` (`PCP` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `HospitalDB`.`Appointment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HospitalDB`.`Appointment` ;

CREATE TABLE IF NOT EXISTS `HospitalDB`.`Appointment` (
  `Appt_ID` INT NOT NULL AUTO_INCREMENT,
  `Scheduled_On` DATETIME NOT NULL,
  `Appt_Date` DATE NULL DEFAULT NULL,
  `Appt_Time` TIME NULL DEFAULT NULL,
  `Appt_kept` TINYINT(1) NULL DEFAULT NULL,
  `Doctor_ID` INT NOT NULL,
  `Patient_ID` INT NOT NULL,
  PRIMARY KEY (`Appt_ID`),
  CONSTRAINT `Doctor_FK`
    FOREIGN KEY (`Doctor_ID`)
    REFERENCES `HospitalDB`.`Doctor` (`Doctor_ID`),
  CONSTRAINT `Patient_Appt_FK`
    FOREIGN KEY (`Patient_ID`)
    REFERENCES `HospitalDB`.`Patient` (`Patient_ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `Doctor_FK` ON `HospitalDB`.`Appointment` (`Doctor_ID` ASC) VISIBLE;

CREATE INDEX `Patient_Appt_FK` ON `HospitalDB`.`Appointment` (`Patient_ID` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `HospitalDB`.`Room`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HospitalDB`.`Room` ;

CREATE TABLE IF NOT EXISTS `HospitalDB`.`Room` (
  `Room_no` VARCHAR(50) NOT NULL,
  `Room_type` VARCHAR(100) NULL DEFAULT NULL,
  `Room_availibility` TINYINT(1) NULL DEFAULT NULL,
  `Room_Cost` DECIMAL(10,2) NULL DEFAULT NULL,
  PRIMARY KEY (`Room_no`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `HospitalDB`.`Check_IN_OUT`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HospitalDB`.`Check_IN_OUT` ;

CREATE TABLE IF NOT EXISTS `HospitalDB`.`Check_IN_OUT` (
  `Stay_ID` INT NOT NULL AUTO_INCREMENT,
  `Patient_ID` INT NOT NULL,
  `Room_no` VARCHAR(50) NOT NULL,
  `Join_date` DATETIME NULL DEFAULT NULL,
  `Leave_date` DATETIME NULL DEFAULT NULL,
  `Discharge_status` VARCHAR(50) NULL DEFAULT NULL,
  PRIMARY KEY (`Stay_ID`),
  CONSTRAINT `Patient_IN_FK`
    FOREIGN KEY (`Patient_ID`)
    REFERENCES `HospitalDB`.`Patient` (`Patient_ID`),
  CONSTRAINT `Room_no_FK`
    FOREIGN KEY (`Room_no`)
    REFERENCES `HospitalDB`.`Room` (`Room_no`))
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `Patient_IN_FK` ON `HospitalDB`.`Check_IN_OUT` (`Patient_ID` ASC) VISIBLE;

CREATE INDEX `Room_no_FK` ON `HospitalDB`.`Check_IN_OUT` (`Room_no` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `HospitalDB`.`Techinican`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HospitalDB`.`Techinican` ;

CREATE TABLE IF NOT EXISTS `HospitalDB`.`Techinican` (
  `Technician_ID` INT NOT NULL,
  `Technician_FName` VARCHAR(100) NULL DEFAULT NULL,
  `Technician_LName` VARCHAR(100) NULL DEFAULT NULL,
  `Technician_dob` DATE NULL DEFAULT NULL,
  `Technician_Gender` VARCHAR(100) NULL DEFAULT NULL,
  `Technician_Address` VARCHAR(100) NULL DEFAULT NULL,
  `Technician_Email` VARCHAR(100) NULL DEFAULT NULL,
  `Technician_phone` VARCHAR(15) NULL DEFAULT NULL,
  PRIMARY KEY (`Technician_ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `HospitalDB`.`Lab_Screening`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HospitalDB`.`Lab_Screening` ;

CREATE TABLE IF NOT EXISTS `HospitalDB`.`Lab_Screening` (
  `Lab_ID` INT NOT NULL AUTO_INCREMENT,
  `Patient_ID` INT NOT NULL,
  `Technician_ID` INT NOT NULL,
  `Doctor_ID` INT NOT NULL,
  `Test_Cost` DECIMAL(10,2) NULL DEFAULT NULL,
  `Date` DATE NOT NULL,
  PRIMARY KEY (`Lab_ID`),
  CONSTRAINT `Doctor_LS_FK`
    FOREIGN KEY (`Doctor_ID`)
    REFERENCES `HospitalDB`.`Doctor` (`Doctor_ID`),
  CONSTRAINT `Patient_LS_FK`
    FOREIGN KEY (`Patient_ID`)
    REFERENCES `HospitalDB`.`Patient` (`Patient_ID`),
  CONSTRAINT `Technician_LS_FK`
    FOREIGN KEY (`Technician_ID`)
    REFERENCES `HospitalDB`.`Techinican` (`Technician_ID`))
ENGINE = InnoDB
AUTO_INCREMENT = 7
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `Patient_LS_FK` ON `HospitalDB`.`Lab_Screening` (`Patient_ID` ASC) VISIBLE;

CREATE INDEX `Doctor_LS_FK` ON `HospitalDB`.`Lab_Screening` (`Doctor_ID` ASC) VISIBLE;

CREATE INDEX `Technician_LS_FK` ON `HospitalDB`.`Lab_Screening` (`Technician_ID` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `HospitalDB`.`Test`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HospitalDB`.`Test` ;

CREATE TABLE IF NOT EXISTS `HospitalDB`.`Test` (
  `Test_ID` INT NOT NULL AUTO_INCREMENT,
  `Test_Name` VARCHAR(100) NULL DEFAULT NULL,
  `Patient_ID` INT NOT NULL,
  `Doctor_ID` INT NOT NULL,
  `Technician_ID` INT NOT NULL,
  `Test_result` VARCHAR(100) NULL DEFAULT NULL,
  PRIMARY KEY (`Test_ID`),
  CONSTRAINT `Doctor_Test_FK`
    FOREIGN KEY (`Doctor_ID`)
    REFERENCES `HospitalDB`.`Doctor` (`Doctor_ID`),
  CONSTRAINT `Patient_Test_FK`
    FOREIGN KEY (`Patient_ID`)
    REFERENCES `HospitalDB`.`Patient` (`Patient_ID`),
  CONSTRAINT `Technician_Test_FK`
    FOREIGN KEY (`Technician_ID`)
    REFERENCES `HospitalDB`.`Techinican` (`Technician_ID`))
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `Patient_Test_FK` ON `HospitalDB`.`Test` (`Patient_ID` ASC) VISIBLE;

CREATE INDEX `Doctor_Test_FK` ON `HospitalDB`.`Test` (`Doctor_ID` ASC) VISIBLE;

CREATE INDEX `Technician_Test_FK` ON `HospitalDB`.`Test` (`Technician_ID` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `HospitalDB`.`Diagnosis`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HospitalDB`.`Diagnosis` ;

CREATE TABLE IF NOT EXISTS `HospitalDB`.`Diagnosis` (
  `Patient_ID` INT NOT NULL,
  `Doctor_ID` INT NOT NULL,
  `Diagnosis_ID` INT NOT NULL AUTO_INCREMENT,
  `Diagnosis` VARCHAR(30) NOT NULL,
  `Lab_ID` INT NULL DEFAULT NULL,
  `Test_ID` INT NULL DEFAULT NULL,
  `since` DATE NOT NULL,
  `enddate` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`Diagnosis_ID`),
  CONSTRAINT `Doctor_D_FK`
    FOREIGN KEY (`Doctor_ID`)
    REFERENCES `HospitalDB`.`Doctor` (`Doctor_ID`),
  CONSTRAINT `Lab_D_FK`
    FOREIGN KEY (`Lab_ID`)
    REFERENCES `HospitalDB`.`Lab_Screening` (`Lab_ID`),
  CONSTRAINT `Patient_D_FK`
    FOREIGN KEY (`Patient_ID`)
    REFERENCES `HospitalDB`.`Patient` (`Patient_ID`),
  CONSTRAINT `Test_D_FK`
    FOREIGN KEY (`Test_ID`)
    REFERENCES `HospitalDB`.`Test` (`Test_ID`))
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `Doctor_D_FK` ON `HospitalDB`.`Diagnosis` (`Doctor_ID` ASC) VISIBLE;

CREATE INDEX `Patient_D_FK` ON `HospitalDB`.`Diagnosis` (`Patient_ID` ASC) VISIBLE;

CREATE INDEX `Lab_D_FK` ON `HospitalDB`.`Diagnosis` (`Lab_ID` ASC) VISIBLE;

CREATE INDEX `Test_D_FK` ON `HospitalDB`.`Diagnosis` (`Test_ID` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `HospitalDB`.`Emergency_Contact`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HospitalDB`.`Emergency_Contact` ;

CREATE TABLE IF NOT EXISTS `HospitalDB`.`Emergency_Contact` (
  `Contact_ID` INT NOT NULL,
  `Contact_Name` VARCHAR(20) NOT NULL,
  `Phone` VARCHAR(12) NOT NULL,
  `Relation` VARCHAR(20) NOT NULL,
  `Patient_ID` INT NOT NULL,
  PRIMARY KEY (`Contact_ID`),
  CONSTRAINT `Patient_FK`
    FOREIGN KEY (`Patient_ID`)
    REFERENCES `HospitalDB`.`Patient` (`Patient_ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `Patient_FK` ON `HospitalDB`.`Emergency_Contact` (`Patient_ID` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `HospitalDB`.`Medicine`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HospitalDB`.`Medicine` ;

CREATE TABLE IF NOT EXISTS `HospitalDB`.`Medicine` (
  `Medicine_ID` INT NOT NULL,
  `Med_Name` VARCHAR(20) NOT NULL,
  `Med_Quantity` INT NOT NULL,
  `Med_Cost` DECIMAL(10,2) NULL DEFAULT NULL,
  PRIMARY KEY (`Medicine_ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `HospitalDB`.`Prescription`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HospitalDB`.`Prescription` ;

CREATE TABLE IF NOT EXISTS `HospitalDB`.`Prescription` (
  `Prescription_ID` INT NOT NULL,
  `Patient_ID` INT NOT NULL,
  `Medicine_ID` INT NOT NULL,
  `Date_start` DATE NULL DEFAULT NULL,
  `Quanitity` INT NOT NULL,
  `Dosage` INT NULL DEFAULT NULL,
  `Doctor_ID` INT NOT NULL,
  PRIMARY KEY (`Prescription_ID`),
  CONSTRAINT `Doctor_ID_FK`
    FOREIGN KEY (`Doctor_ID`)
    REFERENCES `HospitalDB`.`Doctor` (`Doctor_ID`),
  CONSTRAINT `Medicine_ID_FK`
    FOREIGN KEY (`Medicine_ID`)
    REFERENCES `HospitalDB`.`Medicine` (`Medicine_ID`),
  CONSTRAINT `Patient_ID_FK`
    FOREIGN KEY (`Patient_ID`)
    REFERENCES `HospitalDB`.`Patient` (`Patient_ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `Patient_ID_FK` ON `HospitalDB`.`Prescription` (`Patient_ID` ASC) VISIBLE;

CREATE INDEX `Doctor_ID_FK` ON `HospitalDB`.`Prescription` (`Doctor_ID` ASC) VISIBLE;

CREATE INDEX `Medicine_ID_FK` ON `HospitalDB`.`Prescription` (`Medicine_ID` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `HospitalDB`.`Nurse`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HospitalDB`.`Nurse` ;

CREATE TABLE IF NOT EXISTS `HospitalDB`.`Nurse` (
  `Nurse_ID` INT NOT NULL,
  `Nurse_FName` VARCHAR(100) NULL DEFAULT NULL,
  `Nurse_LName` VARCHAR(100) NULL DEFAULT NULL,
  `Nurse_dob` DATE NULL DEFAULT NULL,
  `Nurse_Gender` VARCHAR(100) NULL DEFAULT NULL,
  `Nurse_Address` VARCHAR(100) NULL DEFAULT NULL,
  `Nurse_Email` VARCHAR(100) NULL DEFAULT NULL,
  `Nurse_phone` VARCHAR(15) NULL DEFAULT NULL,
  PRIMARY KEY (`Nurse_ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `HospitalDB`.`Vitals_rounds`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HospitalDB`.`Vitals_rounds` ;

CREATE TABLE IF NOT EXISTS `HospitalDB`.`Vitals_rounds` (
  `Vitals_rounds_ID` INT NOT NULL AUTO_INCREMENT,
  `Patient_ID` INT NOT NULL,
  `Nurse_ID` INT NULL DEFAULT NULL,
  `BP_Systolic` INT NULL DEFAULT NULL,
  `BP_Diastolic` INT NULL DEFAULT NULL,
  `O2_Saturation` INT NULL DEFAULT NULL,
  `Temp` INT NULL DEFAULT NULL,
  `Date` DATETIME NULL DEFAULT NULL,
  `Stay_ID` INT NULL DEFAULT NULL,
  PRIMARY KEY (`Vitals_rounds_ID`),
  CONSTRAINT `Nurse_VR_FK`
    FOREIGN KEY (`Nurse_ID`)
    REFERENCES `HospitalDB`.`Nurse` (`Nurse_ID`),
  CONSTRAINT `Patient_VR_FK`
    FOREIGN KEY (`Patient_ID`)
    REFERENCES `HospitalDB`.`Patient` (`Patient_ID`),
  CONSTRAINT `Stay_ID_MD_FK`
    FOREIGN KEY (`Stay_ID`)
    REFERENCES `HospitalDB`.`Check_IN_OUT` (`Stay_ID`))
ENGINE = InnoDB
AUTO_INCREMENT = 251
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `Patient_VR_FK` ON `HospitalDB`.`Vitals_rounds` (`Patient_ID` ASC) VISIBLE;

CREATE INDEX `Nurse_VR_FK` ON `HospitalDB`.`Vitals_rounds` (`Nurse_ID` ASC) VISIBLE;

CREATE INDEX `Stay_ID_MD_FK` ON `HospitalDB`.`Vitals_rounds` (`Stay_ID` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `HospitalDB`.`Med_dispense`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HospitalDB`.`Med_dispense` ;

CREATE TABLE IF NOT EXISTS `HospitalDB`.`Med_dispense` (
  `Med_dispense_ID` INT NOT NULL AUTO_INCREMENT,
  `Prescription_ID` INT NOT NULL,
  `Vitals_rounds_ID` INT NULL DEFAULT NULL,
  `Stay_ID` INT NULL DEFAULT NULL,
  PRIMARY KEY (`Med_dispense_ID`),
  CONSTRAINT `Prescription_MD_FK`
    FOREIGN KEY (`Prescription_ID`)
    REFERENCES `HospitalDB`.`Prescription` (`Prescription_ID`),
  CONSTRAINT `Stay_MD_FK`
    FOREIGN KEY (`Stay_ID`)
    REFERENCES `HospitalDB`.`Check_IN_OUT` (`Stay_ID`),
  CONSTRAINT `Vitals_rounds_FK`
    FOREIGN KEY (`Vitals_rounds_ID`)
    REFERENCES `HospitalDB`.`Vitals_rounds` (`Vitals_rounds_ID`))
ENGINE = InnoDB
AUTO_INCREMENT = 20
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `Vitals_rounds_FK` ON `HospitalDB`.`Med_dispense` (`Vitals_rounds_ID` ASC) VISIBLE;

CREATE INDEX `Prescription_MD_FK` ON `HospitalDB`.`Med_dispense` (`Prescription_ID` ASC) VISIBLE;

CREATE INDEX `Stay_MD_FK` ON `HospitalDB`.`Med_dispense` (`Stay_ID` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `HospitalDB`.`Treatment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `HospitalDB`.`Treatment` ;

CREATE TABLE IF NOT EXISTS `HospitalDB`.`Treatment` (
  `Treatment_ID` INT NOT NULL AUTO_INCREMENT,
  `Treatment_Name` VARCHAR(100) NULL DEFAULT NULL,
  `Patient_ID` INT NOT NULL,
  `Doctor_ID` INT NOT NULL,
  `Nurse_ID` INT NULL DEFAULT NULL,
  `Treatment_Date` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`Treatment_ID`),
  CONSTRAINT `Doctor_Treat_FK`
    FOREIGN KEY (`Doctor_ID`)
    REFERENCES `HospitalDB`.`Doctor` (`Doctor_ID`),
  CONSTRAINT `Nurse_Treat_FK`
    FOREIGN KEY (`Nurse_ID`)
    REFERENCES `HospitalDB`.`Nurse` (`Nurse_ID`),
  CONSTRAINT `Patient_Treat_FK`
    FOREIGN KEY (`Patient_ID`)
    REFERENCES `HospitalDB`.`Patient` (`Patient_ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `Patient_Treat_FK` ON `HospitalDB`.`Treatment` (`Patient_ID` ASC) VISIBLE;

CREATE INDEX `Doctor_Treat_FK` ON `HospitalDB`.`Treatment` (`Doctor_ID` ASC) VISIBLE;

CREATE INDEX `Nurse_Treat_FK` ON `HospitalDB`.`Treatment` (`Nurse_ID` ASC) VISIBLE;

USE `HospitalDB` ;

-- -----------------------------------------------------
-- procedure AddDiagnosis
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`AddDiagnosis`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AddDiagnosis`(
    IN p_Patient_ID INT,
    IN p_Doctor_ID INT,
    IN p_Diagnosis VARCHAR(255),
    IN p_since DATE
)
BEGIN
    INSERT INTO Diagnosis (Patient_ID, Doctor_ID, Diagnosis, since)
    VALUES (p_Patient_ID, p_Doctor_ID, p_Diagnosis, p_since);
    
    END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddLabScreening
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`AddLabScreening`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AddLabScreening`(
    IN p_Patient_ID INT,
    IN p_Technician_ID INT,
    IN p_Doctor_ID INT,
    IN p_Test_Cost DECIMAL(10, 2),
    IN p_Date DATE
)
BEGIN
    INSERT INTO Lab_Screening (Patient_ID, Technician_ID, Doctor_ID, Test_Cost, Date)
    VALUES (p_Patient_ID, p_Technician_ID, p_Doctor_ID, p_Test_Cost, p_Date);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddPrescription
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`AddPrescription`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AddPrescription`(
    IN p_Patient_ID INT,
    IN p_Medicine_ID INT,
    IN p_Date_start DATE,
    IN p_Quantity INT,
    IN p_Dosage VARCHAR(255),
    IN p_Doctor_ID INT
)
BEGIN
    INSERT INTO Prescription (Patient_ID, Medicine_ID, Date_start, Quantity, Dosage, Doctor_ID)
    VALUES (p_Patient_ID, p_Medicine_ID, p_Date_start, p_Quantity, p_Dosage, p_Doctor_ID);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddTest
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`AddTest`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AddTest`(
    IN p_Test_Name VARCHAR(255),
    IN p_Patient_ID INT,
    IN p_Doctor_ID INT,
    IN p_Technician_ID INT,
    IN p_Test_result VARCHAR(255)
)
BEGIN
    INSERT INTO Test (Test_Name, Patient_ID, Doctor_ID, Technician_ID, Test_result)
    VALUES (p_Test_Name, p_Patient_ID, p_Doctor_ID, p_Technician_ID, p_Test_result);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddVitals_Rounds
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`AddVitals_Rounds`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AddVitals_Rounds`(
    IN p_Patient_ID INT,
    IN p_Nurse_ID INT,
    IN p_BP_Systolic INT,
    IN p_BP_Diastolic INT,
    IN p_O2_Saturation INT,
	IN p_Temp INT,
	IN p_Date DATETIME,
    IN p_Stay_ID INT
)
BEGIN
    INSERT INTO Vitals_rounds (Patient_ID, Nurse_ID_ID, BP_Systolic, BP_Diastolic, O2_Saturation,Temp, Date, Stay_ID)
    VALUES (p_Patient_ID, p_Nurse_ID, p_BP_Systolic, p_BP_Diastolic, p_O2_Saturation, p_Temp, p_Date, p_Stay_ID);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CalculatePatientCharges
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`CalculatePatientCharges`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CalculatePatientCharges`()
BEGIN
    WITH StayDetails AS (
        SELECT 
            Check_IN_OUT.Stay_id,
            Check_IN_OUT.Patient_ID,
            CONCAT(Patient.Patient_FName, ' ', Patient.Patient_LName) AS FullName,
            Check_IN_OUT.Join_date,
            IFNULL(Check_IN_OUT.Leave_date, CURDATE()) AS Leave_date, -- Use current date if patient hasn't checked out
            DATEDIFF(IFNULL(Check_IN_OUT.Leave_date, CURDATE()), Check_IN_OUT.Join_date) AS StayDuration, -- Calculate stay duration
            Room.Room_Cost,
            CONCAT(Doctor.Doctor_FName, ' ', Doctor.Doctor_LName) AS PCPName
        FROM 
            Check_IN_OUT
        LEFT JOIN 
            Patient ON Check_IN_OUT.Patient_ID = Patient.Patient_ID
        LEFT JOIN 
            Room ON Check_IN_OUT.Room_no = Room.Room_no
        LEFT JOIN 
            Doctor ON Patient.PCP = Doctor.Doctor_ID
    ),
    MedicationDispenses AS (
        SELECT 
            md.Vitals_rounds_ID,
            md.Prescription_ID,
            COUNT(md.Med_dispense_ID) AS DispenseCount
        FROM 
            Med_dispense md
        GROUP BY 
            md.Vitals_rounds_ID, md.Prescription_ID
    ),
    MedicationCosts AS (
        SELECT 
            vr.Patient_ID,
            SUM(m.Med_Cost * disp.DispenseCount) AS TotalMedCost
        FROM 
            MedicationDispenses disp
        JOIN 
            Prescription p ON disp.Prescription_ID = p.Prescription_ID
        JOIN 
            Medicine m ON p.Medicine_ID = m.Medicine_ID
        JOIN 
            Vitals_rounds vr ON disp.Vitals_rounds_ID = vr.Vitals_rounds_ID
        GROUP BY 
            vr.Patient_ID
    )
    SELECT 
        sd.Stay_id,
        sd.FullName,
        sd.PCPName,
        sd.Join_date,
        sd.Leave_date,
        sd.StayDuration,
        (sd.StayDuration * sd.Room_Cost) AS TotalRoomCharge,
        COALESCE(mc.TotalMedCost, 0) AS TotalMedCost,
        ((sd.StayDuration * sd.Room_Cost) + COALESCE(mc.TotalMedCost, 0)) AS TotalAmount
    FROM 
        StayDetails sd
    LEFT JOIN 
        MedicationCosts mc ON sd.Patient_ID = mc.Patient_ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CheckIn
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`CheckIn`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CheckIn`(
    IN patient_id INT,
    IN room_no VARCHAR(10),
    IN join_date DATETIME
)
BEGIN
    DECLARE new_stay_id INT;
    
    -- Find the highest Stay_ID and increment by 1
    SELECT IFNULL(MAX(Stay_ID), 0) + 1 INTO new_stay_id FROM Check_IN_OUT;
    
    -- Insert the new stay record
    INSERT INTO Check_IN_OUT (Stay_ID, Patient_ID, Room_no, Join_date, Leave_date, Discharge_status)
    VALUES (new_stay_id, patient_id, room_no, join_date, NULL, 'NULL');
    
    SELECT new_stay_id AS New_Stay_ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ClosePatientStay
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`ClosePatientStay`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ClosePatientStay`(
    IN p_Stay_ID INT,
    IN p_Leave_date DATETIME,
    IN p_Discharge_status VARCHAR(255)
)
BEGIN
    -- Update the Leave_date and Discharge_status for the given Stay_ID
    UPDATE Check_IN_OUT
    SET Leave_date = p_Leave_date,
        Discharge_status = p_Discharge_status
    WHERE Stay_ID = p_Stay_ID;

    -- Check if the update was successful
    IF ROW_COUNT() = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Stay_ID not found';
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Current_Stay_Summary
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`Current_Stay_Summary`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Current_Stay_Summary`()
BEGIN
    -- Get the stay data with patient and PCP information, including closed stays
    WITH StayDetails AS (
        SELECT 
            cio.Stay_ID,
            cio.Room_no,
            cio.Join_date,
            cio.Leave_date,
            CURDATE() AS Today,
            DATEDIFF(CURDATE(), cio.Join_date) AS DaysCheckedIn,
            CONCAT(p.Patient_LName, ', ', p.Patient_FName) AS FullName,
            CONCAT(d.Doctor_FName, ' ', d.Doctor_LName) AS PCPName
        FROM 
            Check_IN_OUT cio
        LEFT JOIN 
            Patient p ON cio.Patient_ID = p.Patient_ID
        LEFT JOIN 
            Doctor d ON p.PCP = d.Doctor_ID
        WHERE 
            cio.Leave_date IS NULL  -- Use this condition for open stays, but adjust if you want closed stays
            OR cio.Leave_date > CURDATE()  -- Optionally, include stays that are still closed (future leave date)
    ),
    -- Gather medications for each stay
    Medications AS (
        SELECT 
            md.Stay_ID,
            GROUP_CONCAT(DISTINCT m.Med_Name SEPARATOR ', ') AS Medications
        FROM 
            Med_dispense md
        JOIN 
            Prescription p ON md.Prescription_ID = p.Prescription_ID
        JOIN 
            Medicine m ON p.Medicine_ID = m.Medicine_ID
        GROUP BY 
            md.Stay_ID
    ),
    -- Find the latest vitals round for each stay
    Last_Round AS (
        SELECT 
            vr.Stay_ID,
            MAX(vr.Date) AS LastRoundDate
        FROM 
            Vitals_rounds vr
        GROUP BY 
            vr.Stay_ID
    ),
    -- Retrieve vitals round details
    Last_Round_Details AS (
        SELECT 
            lr.Stay_ID,
            lr.LastRoundDate,
            CONCAT(n.Nurse_FName, ', ', n.Nurse_LName) AS NurseName,
            CONCAT(vr.BP_Systolic, '/', vr.BP_Diastolic) AS LastBloodPressure,
            vr.O2_Saturation AS LastO2Saturation,
            vr.Temp AS LastTemp
        FROM 
            Last_Round lr
        JOIN 
            Vitals_rounds vr ON lr.Stay_ID = vr.Stay_ID AND lr.LastRoundDate = vr.Date
        LEFT JOIN 
            Nurse n ON vr.Nurse_ID = n.Nurse_ID
    )
    -- Combine all the details and check for NULL values in medications and vitals
    SELECT 
        sd.Stay_ID,
        sd.Room_no,
        sd.Join_date,
        sd.FullName,
        sd.DaysCheckedIn,
        sd.PCPName,
        COALESCE(m.Medications, 'None') AS Medications,
        COALESCE(lrd.LastRoundDate, 'No Vitals') AS LastRoundDate,
        COALESCE(lrd.NurseName, 'No Nurse') AS NurseName,
        COALESCE(lrd.LastBloodPressure, 'No BP') AS LastBloodPressure,
        COALESCE(lrd.LastO2Saturation, 'No O2') AS LastO2Saturation,
        COALESCE(lrd.LastTemp, 'No Temp') AS LastTemp
    FROM 
        StayDetails sd
    LEFT JOIN 
        Medications m ON sd.Stay_ID = m.Stay_ID
    LEFT JOIN 
        Last_Round_Details lrd ON sd.Stay_ID = lrd.Stay_ID
    ORDER BY 
        sd.Stay_ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GenerateInvoice
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`GenerateInvoice`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GenerateInvoice`()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE stay_id INT;
    DECLARE cur CURSOR FOR SELECT Stay_id FROM Check_IN_OUT WHERE Leave_date IS NOT NULL;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO stay_id;
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Create a temporary table to store the invoice details for the current stay
        CREATE TEMPORARY TABLE IF NOT EXISTS InvoiceDetails (
            ItemDescription VARCHAR(255),
            ItemCost DECIMAL(10, 2)
        );

        -- Insert room charge
        INSERT INTO InvoiceDetails (ItemDescription, ItemCost)
        SELECT CONCAT('Room charge for Stay ID ', stay_id), TotalRoomCharge
        FROM Check_IN_OUT
        WHERE Stay_id = stay_id;

        -- Insert medication costs
        INSERT INTO InvoiceDetails (ItemDescription, ItemCost)
        SELECT CONCAT('Medication cost for Stay ID ', stay_id), TotalMedCost
        FROM MedicationCosts
        WHERE Stay_id = stay_id;

        -- Fetch and display all other charges (if any)

        -- Print invoice for the current stay
        SELECT * FROM InvoiceDetails;

        -- Drop the temporary table
        DROP TEMPORARY TABLE IF EXISTS InvoiceDetails;
    END LOOP;

    CLOSE cur;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Stay Summary
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`Stay Summary`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Stay Summary`()
BEGIN
    -- Main Computed Values for Patients
    WITH ComputedValues AS (
        SELECT 
            DISTINCT Check_IN_OUT.Room_no, 
            Check_IN_OUT.Join_date,
            CURDATE() AS Today,
            DATEDIFF(CURDATE(), Check_IN_OUT.Join_date) AS DaysCheckedIn,
            CONCAT(Patient.Patient_LName, ', ', Patient.Patient_FName) AS FullName,
            Patient.Patient_ID,  
            CONCAT(Doctor.Doctor_FName, ' ', Doctor.Doctor_LName) AS PCPName  
        FROM 
            Check_IN_OUT
        LEFT JOIN 
            Patient ON Check_IN_OUT.Patient_ID = Patient.Patient_ID
        LEFT JOIN 
            Doctor ON Patient.PCP = Doctor.Doctor_ID
        WHERE
            Check_IN_OUT.Leave_date IS NULL
    ),
    -- Aggregate Medications to Avoid Duplicates
    Medications AS (
        SELECT 
            Prescription.Patient_ID,
            GROUP_CONCAT(DISTINCT Medicine.Med_Name SEPARATOR ', ') AS Medications
        FROM 
            Prescription
        JOIN 
            Medicine ON Prescription.Medicine_ID = Medicine.Medicine_ID
        GROUP BY 
            Prescription.Patient_ID
    ),
    -- Latest Vitals Round Per Patient
    Last_Round AS (
        SELECT 
            Patient_ID,
            MAX(Date) AS LastRoundDate
        FROM 
            Vitals_rounds
        GROUP BY 
            Patient_ID
    ),
    -- Details of Last Round with Nurse
    Last_Round_nurse AS (
        SELECT 
            lr.Patient_ID,
            lr.LastRoundDate,
            CONCAT(Nurse.Nurse_FName, ', ', Nurse.Nurse_LName) AS NurseName,
            CONCAT(vr.BP_Systolic, '/', vr.BP_Diastolic) AS LastBloodPressure,
            vr.O2_saturation AS LastO2Saturation,
            vr.Temp AS LastTemp
        FROM 
            Last_Round lr
        JOIN 
            Vitals_rounds vr ON lr.Patient_ID = vr.Patient_ID AND lr.LastRoundDate = vr.Date
        JOIN 
            Nurse ON vr.Nurse_ID = Nurse.Nurse_ID
    )
    -- Final Output
    SELECT 
        cv.Room_no,
        cv.Join_date,
        cv.FullName,
        cv.DaysCheckedIn,
        cv.PCPName,
        COALESCE(m.Medications, 'None') AS Medications,
        lr.LastRoundDate,
        lrn.NurseName,
        lrn.LastBloodPressure,
        lrn.LastO2Saturation,
        lrn.LastTemp
    FROM 
        ComputedValues cv
    LEFT JOIN 
        Medications m ON cv.Patient_ID = m.Patient_ID
    LEFT JOIN 
        Last_Round lr ON cv.Patient_ID = lr.Patient_ID
    LEFT JOIN 
        Last_Round_nurse lrn ON cv.Patient_ID = lrn.Patient_ID AND lr.LastRoundDate = lrn.LastRoundDate;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure StaySummary
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`StaySummary`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `StaySummary`()
BEGIN

SELECT 
    Check_IN_OUT.Room_no, 
    Check_IN_OUT.Join_date, 
    CONCAT(Patient.Patient_LName, ', ', Patient.Patient_FName) AS full_name, 
    CURDATE(),
    DATEDIFF(CURDATE(), Check_IN_OUT.Join_date)
FROM 
    Check_IN_OUT
LEFT JOIN 
    Patient 
ON 
    Check_IN_OUT.Patient_ID = Patient.Patient_ID;
    
WITH ComputedValues AS (
    SELECT 
        Check_IN_OUT.Room_no, 
        Check_IN_OUT.Join_date,
        CURDATE() AS Today,
        DATEDIFF(CURDATE(), Check_IN_OUT.Join_date) AS DaysCheckedIn,
        CONCAT(Patient.Patient_LName, ', ', Patient.Patient_FName) AS FullName,
        Patient.Patient_ID,  
        CONCAT(Doctor.Doctor_FName, ' ', Doctor.Doctor_LName) AS PCPName  
    FROM 
        Check_IN_OUT
    LEFT JOIN 
        Patient ON Check_IN_OUT.Patient_ID = Patient.Patient_ID
	LEFT JOIN 
        Doctor ON Patient.PCP = Doctor.Doctor_ID
    WHERE
        Check_IN_OUT.Leave_date IS NULL
),
Medications AS (
    SELECT 
        Prescription.Patient_ID,
        GROUP_CONCAT(Medicine.Med_Name SEPARATOR ', ') AS Medications
    FROM 
        Prescription
    JOIN 
        Medicine ON Prescription.Medicine_ID = Medicine.Medicine_ID
    GROUP BY 
        Prescription.Patient_ID
),
Last_Round AS (
    SELECT 
        Vitals_rounds.Patient_ID,
        MAX(Vitals_rounds.Date) AS LastRoundDate
    FROM
        Vitals_rounds
    GROUP BY 
        Vitals_rounds.Patient_ID
),
Last_Round_nurse AS (
    SELECT 
        lr.Patient_ID,
        lr.LastRoundDate,
        CONCAT(Nurse.Nurse_FName, ', ', Nurse.Nurse_LName) AS NurseName,
        CONCAT(vr.BP_Systolic, '/', vr.BP_Diastolic) AS LastBloodPressure,
        vr.O2_saturation AS LastO2Saturation,
        vr.Temp AS LastTemp
    FROM (
        SELECT 
            Patient_ID,
            MAX(Date) AS LastRoundDate
        FROM 
            Vitals_rounds
        GROUP BY 
            Patient_ID
    ) lr
    JOIN 
        Vitals_rounds vr ON lr.Patient_ID = vr.Patient_ID AND lr.LastRoundDate = vr.Date
    JOIN 
        Nurse ON vr.Nurse_ID = Nurse.Nurse_ID
)SELECT 
    cv.Room_no,
    cv.Join_date,
    cv.FullName,
    cv.DaysCheckedIn,
    cv.PCPName,
    COALESCE(m.Medications, 'None') AS Medications,
    lr.LastRoundDate,
    lrn.NurseName,
    lrn.LastBloodPressure,
    lrn.LastO2Saturation,
    lrn.LastTemp
FROM 
    ComputedValues cv
LEFT JOIN 
    Medications m ON cv.Patient_ID = m.Patient_ID
LEFT JOIN 
    Last_Round lr ON cv.Patient_ID = lr.Patient_ID
LEFT JOIN 
    Last_Round_nurse lrn ON cv.Patient_ID = lrn.Patient_ID AND lr.LastRoundDate = lrn.LastRoundDate;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Stay_Summary
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`Stay_Summary`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Stay_Summary`()
BEGIN
    -- Get the stay data with patient and PCP information, including closed stays
    WITH StayDetails AS (
        SELECT 
            cio.Stay_ID,
            cio.Room_no,
            cio.Join_date,
            cio.Leave_date,
            CURDATE() AS Today,
            DATEDIFF(CURDATE(), cio.Join_date) AS DaysCheckedIn,
            CONCAT(p.Patient_LName, ', ', p.Patient_FName) AS FullName,
            CONCAT(d.Doctor_FName, ' ', d.Doctor_LName) AS PCPName
        FROM 
            Check_IN_OUT cio
        LEFT JOIN 
            Patient p ON cio.Patient_ID = p.Patient_ID
        LEFT JOIN 
            Doctor d ON p.PCP = d.Doctor_ID
        WHERE 
            cio.Leave_date IS NULL  -- Use this condition for open stays, but adjust if you want closed stays
            OR cio.Leave_date > CURDATE()  -- Optionally, include stays that are still closed (future leave date)
    ),
    -- Gather medications for each stay
    Medications AS (
        SELECT 
            md.Stay_ID,
            GROUP_CONCAT(DISTINCT m.Med_Name SEPARATOR ', ') AS Medications
        FROM 
            Med_dispense md
        JOIN 
            Prescription p ON md.Prescription_ID = p.Prescription_ID
        JOIN 
            Medicine m ON p.Medicine_ID = m.Medicine_ID
        GROUP BY 
            md.Stay_ID
    ),
    -- Find the latest vitals round for each stay
    Last_Round AS (
        SELECT 
            vr.Stay_ID,
            MAX(vr.Date) AS LastRoundDate
        FROM 
            Vitals_rounds vr
        GROUP BY 
            vr.Stay_ID
    ),
    -- Retrieve vitals round details
    Last_Round_Details AS (
        SELECT 
            lr.Stay_ID,
            lr.LastRoundDate,
            CONCAT(n.Nurse_FName, ', ', n.Nurse_LName) AS NurseName,
            CONCAT(vr.BP_Systolic, '/', vr.BP_Diastolic) AS LastBloodPressure,
            vr.O2_Saturation AS LastO2Saturation,
            vr.Temp AS LastTemp
        FROM 
            Last_Round lr
        JOIN 
            Vitals_rounds vr ON lr.Stay_ID = vr.Stay_ID AND lr.LastRoundDate = vr.Date
        LEFT JOIN 
            Nurse n ON vr.Nurse_ID = n.Nurse_ID
    )
    -- Combine all the details and check for NULL values in medications and vitals
    SELECT 
        sd.Stay_ID,
        sd.Room_no,
        sd.Join_date,
        sd.FullName,
        sd.DaysCheckedIn,
        sd.PCPName,
        COALESCE(m.Medications, 'None') AS Medications,
        COALESCE(lrd.LastRoundDate, 'No Vitals') AS LastRoundDate,
        COALESCE(lrd.NurseName, 'No Nurse') AS NurseName,
        COALESCE(lrd.LastBloodPressure, 'No BP') AS LastBloodPressure,
        COALESCE(lrd.LastO2Saturation, 'No O2') AS LastO2Saturation,
        COALESCE(lrd.LastTemp, 'No Temp') AS LastTemp
    FROM 
        StayDetails sd
    LEFT JOIN 
        Medications m ON sd.Stay_ID = m.Stay_ID
    LEFT JOIN 
        Last_Round_Details lrd ON sd.Stay_ID = lrd.Stay_ID
    ORDER BY 
        sd.Stay_ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure TestCheckIn
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`TestCheckIn`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `TestCheckIn`(
    IN patient_id INT,
    IN room_no VARCHAR(10),
    IN join_date DATETIME
)
BEGIN
    DECLARE new_stay_id INT;
    DECLARE room_status TINYINT(1) DEFAULT 0;

    -- Check room availability
    SELECT Room_availibility INTO room_status
    FROM Room
    WHERE LOWER(Room_no) = LOWER(room_no)
    LIMIT 1;

    IF room_status = 1 THEN
        -- Find the highest Stay_ID and increment by 1
        SELECT IFNULL(MAX(Stay_ID), 0) + 1 INTO new_stay_id FROM Check_IN_OUT;

        -- Insert the new stay record
        INSERT INTO Check_IN_OUT (Stay_ID, Patient_ID, Room_no, Join_date, Leave_date, Discharge_status)
        VALUES (new_stay_id, patient_id, room_no, join_date, NULL, 'NULL');

        -- Mark the room as unavailable
        UPDATE Room
        SET Room_availibility = 0
        WHERE LOWER(Room_no) = LOWER(room_no);

        SELECT new_stay_id AS New_Stay_ID;
    ELSE
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Room is not available';
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure dispense_medicine
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`dispense_medicine`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `dispense_medicine`(
    IN p_Prescription_ID INT,
    IN p_Vitals_rounds_ID INT
)
BEGIN
    DECLARE v_Medicine_ID INT;
    DECLARE v_Med_Quantity INT;
    DECLARE v_Dosage INT;
    DECLARE v_Prescribed_Dosage INT;
    DECLARE v_Total_Dosage INT;
    DECLARE v_Dispense_Date DATE;

    -- Get the Medicine_ID and Dosage from the Prescription table
    SELECT Medicine_ID, Dosage INTO v_Medicine_ID, v_Prescribed_Dosage
    FROM Prescription
    WHERE Prescription_ID = p_Prescription_ID;

    -- Get the current quantity of the medication
    SELECT Med_Quantity INTO v_Med_Quantity
    FROM Medicine
    WHERE Medicine_ID = v_Medicine_ID;

    -- Get the dispense date from the Vitals_rounds table
    SELECT DATE INTO v_Dispense_Date
    FROM Vitals_rounds
    WHERE Vitals_rounds_ID = p_Vitals_rounds_ID;

    -- Calculate the total dosage dispensed for the specific prescription on the given date
    SELECT IFNULL(SUM(p.Dosage), 0) INTO v_Total_Dosage
    FROM Med_dispense md
    JOIN Prescription p ON md.Prescription_ID = p.Prescription_ID
    JOIN Vitals_rounds vr ON md.Vitals_rounds_ID = vr.Vitals_rounds_ID
    WHERE md.Prescription_ID = p_Prescription_ID
      AND DATE(vr.Date) = v_Dispense_Date;

    -- Check if the medication quantity is greater than 0
    IF v_Med_Quantity > 0 THEN
        -- Check if the total dosage for the date does not exceed the prescribed dosage
        IF v_Total_Dosage + v_Prescribed_Dosage <= v_Prescribed_Dosage THEN
            -- Insert into Med_dispense table
            INSERT INTO Med_dispense (Prescription_ID, Vitals_rounds_ID)
            VALUES (p_Prescription_ID, p_Vitals_rounds_ID);
            
            -- Update the Med_Quantity in the Medicine table
            UPDATE Medicine
            SET Med_Quantity = Med_Quantity - 1
            WHERE Medicine_ID = v_Medicine_ID;
        ELSE
            -- Raise an error if the total dosage for the date exceeds the prescribed dosage
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Daily dosage limit exceeded';
        END IF;
    ELSE
        -- Raise an error if the medication quantity is 0
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Insufficient medication quantity';
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure new_procedure
-- -----------------------------------------------------

USE `HospitalDB`;
DROP procedure IF EXISTS `HospitalDB`.`new_procedure`;

DELIMITER $$
USE `HospitalDB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `new_procedure`()
BEGIN

SELECT 
    Check_IN_OUT.Room_no, 
    Check_IN_OUT.Join_date, 
    CONCAT(Patient.Patient_LName, ', ', Patient.Patient_FName) AS full_name, 
    CURDATE(),
    DATEDIFF(CURDATE(), Check_IN_OUT.Join_date)
FROM 
    Check_IN_OUT
LEFT JOIN 
    Patient 
ON 
    Check_IN_OUT.Patient_ID = Patient.Patient_ID;
    
WITH ComputedValues AS (
    SELECT 
        Check_IN_OUT.Room_no, 
        Check_IN_OUT.Join_date,
        CURDATE() AS Today,
        DATEDIFF(CURDATE(), Check_IN_OUT.Join_date) AS DaysCheckedIn,
        CONCAT(Patient.Patient_LName, ', ', Patient.Patient_FName) AS FullName,
        Patient.Patient_ID,  
        CONCAT(Doctor.Doctor_FName, ' ', Doctor.Doctor_LName) AS PCPName  
    FROM 
        Check_IN_OUT
    LEFT JOIN 
        Patient ON Check_IN_OUT.Patient_ID = Patient.Patient_ID
	LEFT JOIN 
        Doctor ON Patient.PCP = Doctor.Doctor_ID
    WHERE
        Check_IN_OUT.Leave_date IS NULL
),
Medications AS (
    SELECT 
        Prescription.Patient_ID,
        GROUP_CONCAT(Medicine.Med_Name SEPARATOR ', ') AS Medications
    FROM 
        Prescription
    JOIN 
        Medicine ON Prescription.Medicine_ID = Medicine.Medicine_ID
    GROUP BY 
        Prescription.Patient_ID
),
Last_Round AS (
    SELECT 
        Vitals_rounds.Patient_ID,
        MAX(Vitals_rounds.Date) AS LastRoundDate
    FROM
        Vitals_rounds
    GROUP BY 
        Vitals_rounds.Patient_ID
),
Last_Round_nurse AS (
    SELECT 
        lr.Patient_ID,
        lr.LastRoundDate,
        CONCAT(Nurse.Nurse_FName, ', ', Nurse.Nurse_LName) AS NurseName,
        CONCAT(vr.BP_Systolic, '/', vr.BP_Diastolic) AS LastBloodPressure,
        vr.O2_saturation AS LastO2Saturation,
        vr.Temp AS LastTemp
    FROM (
        SELECT 
            Patient_ID,
            MAX(Date) AS LastRoundDate
        FROM 
            Vitals_rounds
        GROUP BY 
            Patient_ID
    ) lr
    JOIN 
        Vitals_rounds vr ON lr.Patient_ID = vr.Patient_ID AND lr.LastRoundDate = vr.Date
    JOIN 
        Nurse ON vr.Nurse_ID = Nurse.Nurse_ID
)SELECT 
    cv.Room_no,
    cv.Join_date,
    cv.FullName,
    cv.DaysCheckedIn,
    cv.PCPName,
    COALESCE(m.Medications, 'None') AS Medications,
    lr.LastRoundDate,
    lrn.NurseName,
    lrn.LastBloodPressure,
    lrn.LastO2Saturation,
    lrn.LastTemp
FROM 
    ComputedValues cv
LEFT JOIN 
    Medications m ON cv.Patient_ID = m.Patient_ID
LEFT JOIN 
    Last_Round lr ON cv.Patient_ID = lr.Patient_ID
LEFT JOIN 
    Last_Round_nurse lrn ON cv.Patient_ID = lrn.Patient_ID AND lr.LastRoundDate = lrn.LastRoundDate;


END$$

DELIMITER ;
USE `HospitalDB`;

DELIMITER $$

USE `HospitalDB`$$
DROP TRIGGER IF EXISTS `HospitalDB`.`NewStayTrigger` $$
USE `HospitalDB`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `HospitalDB`.`NewStayTrigger`
AFTER INSERT ON `HospitalDB`.`Check_IN_OUT`
FOR EACH ROW
BEGIN
    IF NEW.Leave_date IS NULL THEN
        UPDATE Room
        SET Room_availibility = 0
        WHERE Room_no = NEW.Room_no;
    END IF;
END$$


USE `HospitalDB`$$
DROP TRIGGER IF EXISTS `HospitalDB`.`UpdateLeaveDateTrigger` $$
USE `HospitalDB`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `HospitalDB`.`UpdateLeaveDateTrigger`
BEFORE UPDATE ON `HospitalDB`.`Check_IN_OUT`
FOR EACH ROW
BEGIN
    IF OLD.Leave_date IS NULL AND NEW.Leave_date IS NOT NULL THEN
        UPDATE Room
        SET Room_availibility = 1
        WHERE Room_no = OLD.Room_no;
    END IF;
END$$


USE `HospitalDB`$$
DROP TRIGGER IF EXISTS `HospitalDB`.`before_insert_check_in_out` $$
USE `HospitalDB`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `HospitalDB`.`before_insert_check_in_out`
BEFORE INSERT ON `HospitalDB`.`Check_IN_OUT`
FOR EACH ROW
BEGIN
    IF NOT IsRoomAvailable(NEW.Room_no) THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Room is not available for check-in.';
    END IF;
END$$


USE `HospitalDB`$$
DROP TRIGGER IF EXISTS `HospitalDB`.`after_insert_med_dispense` $$
USE `HospitalDB`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `HospitalDB`.`after_insert_med_dispense`
AFTER INSERT ON `HospitalDB`.`Med_dispense`
FOR EACH ROW
BEGIN
    DECLARE v_Medicine_ID INT;
    
    -- Get the Medicine_ID from the Prescription table
    SELECT Medicine_ID INTO v_Medicine_ID
    FROM Prescription
    WHERE Prescription_ID = NEW.Prescription_ID;

    -- Update the Med_Quantity in the Medicine table
    UPDATE Medicine
    SET Med_Quantity = Med_Quantity - 1
    WHERE Medicine_ID = v_Medicine_ID;
END$$


USE `HospitalDB`$$
DROP TRIGGER IF EXISTS `HospitalDB`.`before_insert_med_dispense` $$
USE `HospitalDB`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `HospitalDB`.`before_insert_med_dispense`
BEFORE INSERT ON `HospitalDB`.`Med_dispense`
FOR EACH ROW
BEGIN
    DECLARE v_Medicine_ID INT;
    DECLARE v_Prescribed_Dosage INT;
    DECLARE v_Total_Dosage INT;
    DECLARE v_Dispense_Date DATE;
    DECLARE v_Current_Day_Dosage INT;

    -- Get the Prescription details
    SELECT Medicine_ID, Dosage INTO v_Medicine_ID, v_Prescribed_Dosage
    FROM Prescription
    WHERE Prescription_ID = NEW.Prescription_ID;

    -- Get the dispense date from the Vitals_rounds table
    SELECT `Date` INTO v_Dispense_Date
    FROM Vitals_rounds
    WHERE Vitals_rounds_ID = NEW.Vitals_rounds_ID;

    -- Calculate the total dosage dispensed for the specific prescription on the given date
    SELECT IFNULL(COUNT(*), 0) INTO v_Total_Dosage
    FROM Med_dispense md
    JOIN Vitals_rounds vr ON md.Vitals_rounds_ID = vr.Vitals_rounds_ID
    WHERE md.Prescription_ID = NEW.Prescription_ID
      AND DATE(vr.Date) = DATE(v_Dispense_Date);

    -- Determine the current dosage count for the day including the new entry
    SET v_Current_Day_Dosage = v_Total_Dosage + 1;

    -- Check if the total dosage for the date does not exceed the prescribed dosage
    IF v_Current_Day_Dosage > v_Prescribed_Dosage THEN
        -- Raise an error if the total dosage for the date exceeds the prescribed dosage
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Daily dosage limit exceeded';
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
